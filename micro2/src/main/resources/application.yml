server:
  port: ${SERVER_PORT:8082}

spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
    show-sql: true
    open-in-view: false
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
  flyway:
    enabled: ${SPRING_FLYWAY_ENABLED:true}
    locations: classpath:db/migration
    baseline-on-migrate: ${SPRING_FLYWAY_BASELINE_ON_MIGRATE:true}
    validate-on-migrate: ${SPRING_FLYWAY_VALIDATE_ON_MIGRATE:false}

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
    consumer:
      group-id: micro2-cuentas
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: "com.paul.micro2.service.ClienteEventsConsumer$ClienteEvent"
        spring.json.use.type.headers: false
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
        spring.json.trusted.packages: "*"

logging:
  level:
    org.springframework.kafka: INFO
    com.paul.micro2: DEBUG

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger

#server:
#  port: 8082
#
#spring:
#  datasource:
#    url: jdbc:mysql://localhost:3306/cuenta_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
#    username: root
#    password: 1234
#    driver-class-name: com.mysql.cj.jdbc.Driver
#  jpa:
#    hibernate:
#      ddl-auto: validate
#    show-sql: true
#    open-in-view: false
#    properties:
#      hibernate:
#        format_sql: true
#        dialect: org.hibernate.dialect.MySQL8Dialect
#  flyway:
#    enabled: true
#    locations: classpath:db/migration
#    baseline-on-migrate: true
#    validate-on-migrate: false
#  kafka:
#    bootstrap-servers: localhost:29092   # ← como dejamos en docker-compose
#    consumer:
#      group-id: micro2-cuentas
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      # Wrap deserialization to handle errors gracefully
#      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#      properties:
#        # delegate to JsonDeserializer for the actual JSON to object conversion
#        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
#        spring.json.trusted.packages: "*"   # permite deserializar tus records
#        spring.json.value.default.type: "com.paul.micro2.service.ClienteEventsConsumer$ClienteEvent"
#        # ignore type headers that may come from micro1 pointing to classes not present here
#        spring.json.use.type.headers: false
#      auto-offset-reset: earliest
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      properties:
#        spring.json.add.type.headers: false
#        spring.json.trusted.packages: "*"
#
## Logging útil en desarrollo
#logging:
#  level:
#    org.springframework.kafka: INFO
#    com.paul.micro2: DEBUG
#
## Swagger / OpenAPI
#springdoc:
#  api-docs:
#    path: /v3/api-docs
#  swagger-ui:
#    path: /swagger
